{"version":3,"sources":["components/Bar.js","components/Progressbar.js","components/Buttons.js","App.js","index.js"],"names":["Bar","percentage","limit","backgroundPercentage","width","backgroundColor","className","data-testid","style","Progressbar","data","bars","length","map","bar","index","Buttons","updateProgressBars","useState","selectedProgressBar","setProgressBar","buttons","onChange","e","currentTarget","value","i","button","type","onClick","App","isLoading","content","error","setData","fetchData","a","fetch","response","json","result","useEffect","progressBarIndex","newValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAeeA,G,MAbH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,MACnBC,EAAuB,CAC3BC,MAAM,GAAD,OAAMH,EAAaC,EAAS,IAA5B,KACLG,gBAAiBJ,EAAaC,EAAQ,MAAQ,WAEhD,OACE,sBAAKI,UAAU,cAAcC,cAAY,OAAzC,UACE,sBAAMD,UAAU,mBAAhB,mBAAuCL,EAAvC,OACA,qBAAKK,UAAU,wBAAwBE,MAAOL,SCIrCM,EAZK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAgBD,EAAhBC,KAAMT,EAAUQ,EAAVR,MACd,OACE,mCACGS,EAAKC,QACJD,EAAKE,KAAI,SAACC,EAAKC,GACb,OAAO,cAAC,EAAD,CAAiBd,WAAYa,EAAKZ,MAAOA,GAA/Ba,SC0BZC,G,MA/BC,SAAC,GAAkC,IAAhCN,EAA+B,EAA/BA,KAAMO,EAAyB,EAAzBA,mBAAyB,EACFC,mBAAS,GADP,mBACzCC,EADyC,KACpBC,EADoB,KAExCT,EAAkBD,EAAlBC,KAAMU,EAAYX,EAAZW,QACd,OACE,sBAAKf,UAAU,UAAf,UACE,wBAAQgB,SAAU,SAACC,GAAD,OAAOH,EAAeG,EAAEC,cAAcC,QAAxD,SACGd,EAAKC,QACJD,EAAKE,KAAI,SAACC,EAAKY,GACb,OACE,yBAAgBD,MAAOC,EAAvB,uBACaA,EAAI,IADJA,QAMpBL,EAAQT,QACPS,EAAQR,KAAI,SAACc,EAAQD,GACnB,OACE,wBAEEE,KAAK,SACLC,QAAS,kBAAMZ,EAAmBE,EAAqBQ,IAHzD,SAKGA,GAJID,WCwCJI,G,MAtDH,WAAO,IAAD,EACQZ,mBAAS,CAC/Ba,WAAW,EACXC,QAAS,GACTC,OAAO,IAJO,mBACTvB,EADS,KACHwB,EADG,KAOVC,EAAS,uCAAG,8BAAAC,EAAA,+EAEOC,MAXT,oCASE,cAEVC,EAFU,gBAGOA,EAASC,OAHhB,OAGRC,EAHQ,OAIdN,EAAQ,CAAEH,WAAW,EAAOC,QAASQ,EAAQP,OAAO,IAJtC,kDAMdC,EAAQ,CAAEH,WAAW,EAAOC,QAAS,GAAIC,OAAO,IANlC,0DAAH,qDAyBf,OAJAQ,qBAAU,WACRN,MACC,IAGD,qBAAK7B,UAAU,MAAf,SACE,mCACE,qDACK,OAAJI,QAAI,IAAJA,OAAA,EAAAA,EAAMqB,WACL,yDACM,OAAJrB,QAAI,IAAJA,OAAA,EAAAA,EAAMuB,OACR,yDAEA,qCACE,cAAC,EAAD,CAAavB,KAAMA,EAAKsB,UACxB,cAAC,EAAD,CACEtB,KAAMA,EAAKsB,QACXf,mBA5Be,SAACyB,EAAkBjB,GAAW,IAC/Cd,EAASD,EAAKsB,QAAdrB,KACFgC,EAAWhC,EAAK+B,GAAoBjB,EAC1Cd,EAAK+B,GAAoBC,EAAW,EAAI,EAAIA,EAC5CT,EAAQ,CACNH,WAAW,EACXC,QAAQ,2BAAMtB,EAAKsB,SAAZ,IAAqBrB,KAAMA,IAClCsB,OAAO,iBC3BbW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.54f5ba8f.chunk.js","sourcesContent":["import \"../styles/Bar.css\";\r\n\r\nconst Bar = ({ percentage, limit }) => {\r\n  const backgroundPercentage = {\r\n    width: `${(percentage / limit) * 100}%`,\r\n    backgroundColor: percentage > limit ? \"red\" : \"#b1d7e7\",\r\n  };\r\n  return (\r\n    <div className=\"bar-wrapper\" data-testid=\"bars\">\r\n      <span className=\"percentage-label\">{`${percentage}%`}</span>\r\n      <div className=\"background-percentage\" style={backgroundPercentage}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import Bar from \"./Bar\";\r\n\r\nconst Progressbar = ({ data }) => {\r\n  const { bars, limit } = data;\r\n  return (\r\n    <>\r\n      {bars.length &&\r\n        bars.map((bar, index) => {\r\n          return <Bar key={index} percentage={bar} limit={limit} />;\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Progressbar;\r\n","import { useState } from \"react\";\r\nimport \"../styles/Buttons.css\";\r\n\r\nconst Buttons = ({ data, updateProgressBars }) => {\r\n  const [selectedProgressBar, setProgressBar] = useState(0);\r\n  const { bars, buttons } = data;\r\n  return (\r\n    <div className=\"buttons\">\r\n      <select onChange={(e) => setProgressBar(e.currentTarget.value)}>\r\n        {bars.length &&\r\n          bars.map((bar, i) => {\r\n            return (\r\n              <option key={i} value={i}>\r\n                #progress {i + 1}\r\n              </option>\r\n            );\r\n          })}\r\n      </select>\r\n      {buttons.length &&\r\n        buttons.map((button, i) => {\r\n          return (\r\n            <button\r\n              key={i}\r\n              type=\"button\"\r\n              onClick={() => updateProgressBars(selectedProgressBar, button)}\r\n            >\r\n              {button}\r\n            </button>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { useEffect, useState } from \"react\";\nimport Progressbar from \"./components/Progressbar\";\nimport Buttons from \"./components/Buttons\";\n\nimport \"./styles/App.css\";\n\nconst FETCH_URL = \"http://pb-api.herokuapp.com/bars\";\n\nconst App = () => {\n  const [data, setData] = useState({\n    isLoading: true,\n    content: {},\n    error: false,\n  });\n\n  const fetchData = async () => {\n    try {\n      let response = await fetch(FETCH_URL);\n      const result = await response.json();\n      setData({ isLoading: false, content: result, error: false });\n    } catch (err) {\n      setData({ isLoading: false, content: {}, error: true });\n    }\n  };\n\n  const updateProgressBars = (progressBarIndex, value) => {\n    const { bars } = data.content;\n    const newValue = bars[progressBarIndex] + value;\n    bars[progressBarIndex] = newValue < 0 ? 0 : newValue;\n    setData({\n      isLoading: false,\n      content: { ...data.content, bars: bars },\n      error: false,\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Progress Bars Demo</h1>\n        {data?.isLoading ? (\n          <p>Loading, please wait...</p>\n        ) : data?.error ? (\n          <p> Looks like API is down.</p>\n        ) : (\n          <>\n            <Progressbar data={data.content} />\n            <Buttons\n              data={data.content}\n              updateProgressBars={updateProgressBars}\n            />\n          </>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}